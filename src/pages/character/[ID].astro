---
import Layout from '../../layouts/Layout.astro';
import characters from '../../assets/data/characters.json';
import BentoItem from '../../components/BentoItem.astro';
import BentoTable from '../../components/BentoTable.astro';
import classes from '../../assets/data/classes.json';
import { Image } from 'astro:assets';

export async function getStaticPaths() {
  return characters.map((chars) => {
    return {
      params: { id: chars.ID },
    };
  });
}

const { id } = Astro.params
const char = characters.filter(char => char.ID === id)
const imagen = await Astro.glob('../../assets/images/characters/*.webp')
.then(imgs => imgs
  .map(img => img.default)
    .filter(item => item.src.includes(id))
);
---
<Layout 
    title={char[0].Name}
    description=`Character info: ${char[0].Name}`
>
  <section class="grid max-w-6xl gap-2 p-2 m-auto overflow-hidden auto-rows-min md:grid-cols-12"
  >
    <BentoItem title="Image" class="md:col-span-3 md:row-span-6">
      {
        imagen.map(img => (  
          <Image
            src={img}
            alt={char[0].Name}
            class="object-scale-down object-bottom w-auto m-auto rounded-lg sm:object-cover h-60 sm:h-full"
          />
        ))
      }
    </BentoItem>
    <BentoItem title="Bio" class="md:col-span-6 md:row-span-3">
      <h2 class="mb-2 text-2xl font-semibold">{char[0].Name}</h2>
      <p class="text-justify text-balance">Alear is the main protagonist in Fire Emblem Engage. As an Avatar, their gender, along with their name and birthday, is determined by the player.</p>
    </BentoItem>
    <BentoItem title="Recruitment" class="md:col-span-3 md:row-span-2">
      <p>{char[0].RecruitementChapter} ({char[0].RecruitementDescription})</p>
    </BentoItem>
    <BentoItem title="Base SP" class="md:col-span-2 md:row-span-1">
      <p>{char[0].BaseSP}</p>
    </BentoItem>
    <BentoItem title="Libre2" class="md:col-span-1 md:row-span-1">
      <p>Libre2</p>
    </BentoItem>
    <BentoItem title="Personal Skill" class="md:col-span-9 md:row-span-1">
      <img class="inline align-middle size-6" src=`/images/personal-skill/${char[0].PersonalSkill}.webp` alt={char[0].PersonalSkill}/>
      <p class="inline align-middle text-pretty ms-1">{char[0].PersonalSkill}: {char[0].PersonalSkillDesc}</p>
    </BentoItem>
    <BentoItem title="Proficiencies"  class="md:col-span-4 md:row-span-2">
      <img class="inline align-middle rounded-md size-6" src={`/images/proficiencies/${char[0].InnateProficiencies}.webp`} alt={char[0].InnateProficiencies}/>
      <p class="inline font-semibold align-middle ms-1 text-cyan-400">{char[0].InnateProficiencies} (Innate)</p>
      
      {(char[0].Proficiencies !== "-" && !Array.isArray(char[0].Proficiencies)) && (
        <>
          <img class="inline ml-2 align-middle rounded-md size-6" src={`/images/proficiencies/${char[0].Proficiencies}.webp`} alt={char[0].Proficiencies}/>
          <p class="inline align-middle ms-1">{char[0].Proficiencies}</p>
        </>
      )}

      {(char[0].Proficiencies !== "-") && Array.isArray(char[0].Proficiencies) && char[0].Proficiencies.map((proficiency: string) => (
        <>
          <img class="inline ml-2 align-middle rounded-md size-6" src={`/images/proficiencies/${proficiency}.webp`} alt={proficiency}/>
          <p class="inline align-middle ms-1">{proficiency}</p>
        </>
      ))}
    </BentoItem>
    <BentoItem title="Rank"           class="md:col-span-5 md:row-span-2">
      <p>Stats Ranking</p>
    </BentoItem>
    <BentoItem title="Emblem"  class="md:col-span-2 md:row-span-2">
      <div class="flex items-center mb-2">
        <select id="emblem" name="emblem" class="p-2 rounded-lg min-w-min">
          <option value="" selected>- Select -</option>
        </select>
      </div>
    </BentoItem>
    <BentoItem title="Base Class"          class="md:col-span-5 md:row-span-2">
      <div class="flex justify-between">
        <p>Base: {char[0].BaseClass}</p>
        <label for="applyBaseClass" class="inline-flex align-middle cursor-pointer ms-2">
          <input id="applyBaseClass" type="checkbox" class="sr-only peer"/>
          <div id="baseClassToggle" class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600 peer-disabled:peer-checked:bg-green-800 after:bg-gray-100 peer-disabled:after:bg-gray-500"></div>
          Apply
        </label>
      </div>
    </BentoItem>
    <BentoItem title="Base Level"          class="md:col-span-5 md:row-span-2">
      <div class="flex items-center justify-between mb-2">
        <p class="m-0 mr-4 min-w-max">Initial: {char[0].BaseLevel}</p>
        <p class="m-0 mr-4 min-w-max">Internal: {char[0].BaseInternalLevel}</p>
        <div class="flex">
          <button id="baseLvlDown" class="w-8 p-1 font-extrabold text-center bg-gray-700 border border-gray-600 rounded-s-lg">-</button>
          <input type="text" readonly id="baseLvl" value=`${char[0].BaseLevel}` min=`${char[0].BaseLevel}` max="20" class="w-12 p-1 text-sm text-center bg-gray-700 border border-gray-600">
          <button id="baseLvlUp" class="w-8 p-1 font-extrabold text-center bg-gray-700 border border-gray-600 rounded-e-lg">+</button>
        </div>
      </div>
    </BentoItem>
    <BentoTable
      tableType="Base"
      id="baseGrowths"
      title="GROWTH RATES"
      character={char[0]}
    />
    <BentoTable
      tableType="Base"
      id="baseStats"
      title="STATS"
      character={char[0]}
    />
    <BentoItem title="Promotion" class="md:col-span-2 md:row-span-2">
      <label for="promote" class="inline-flex align-middle cursor-pointer ms-2">
        <input id="promote" type="checkbox" class="sr-only peer"/>
        <div id="promoteToggle" class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-violet-600 peer-disabled:peer-checked:bg-violet-800 after:bg-gray-100 peer-disabled:after:bg-gray-500"></div>
        Promote
      </label>
    </BentoItem>
    <BentoItem title="Advanced Class" class="md:col-span-5 md:row-span-2">
      <div class="flex justify-between">
        <select id="advClass" disabled name="advClass" class="p-2 rounded-lg min-w-min">
          <option value="" selected>- Select -</option>
          {
            classes.map(item => (
            ((item.ExclusiveChar === "" || item.ExclusiveChar === char[0].Name) && 
            (item.ReqBaseClassId === "" || item.ReqBaseClassId === char[0].BaseClass))
            && (
              <option value={item.ID}>{item.ID} | {item.Type}</option>
            )
          ))}
        </select>
        <label for="applyAdvClass" class="inline-flex align-middle cursor-pointer ms-2">
          <input id="applyAdvClass" type="checkbox" disabled class="sr-only peer"/>
          <div id="advClassToggle" class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600 peer-disabled:peer-checked:bg-cyan-800 after:bg-gray-100 peer-disabled:after:bg-gray-500"></div>
          Apply
        </label>
      </div>

    </BentoItem>
    <BentoItem title="Advanced Level" class="md:col-span-5 md:row-span-2">
      <div class="flex">
        <button id="advLvlDown" class="w-8 p-1 font-extrabold text-center bg-gray-700 border border-gray-600 rounded-s-lg">-</button>
        <input type="text" readonly id="advLvl" value="1" min="1" max="20" class="w-12 p-1 text-sm text-center bg-gray-700 border border-gray-600">
        <button id="advLvlUp" class="w-8 p-1 font-extrabold text-center bg-gray-700 border border-gray-600 rounded-e-lg">+</button>
      </div>
    </BentoItem>
    <BentoTable
      tableType="Advanced"
      id="advGrowths"
      title="GROWTH RATES"
    />
    <BentoTable
      tableType="Advanced"
      id="advStats"
      title="STATS"
    />
  </section>
</Layout>

<script define:vars={{ baseClass: char[0].BaseClass, charID: char[0].ID }}>
  const $baseClassToggle = document.getElementById('applyBaseClass');
  const $baseLvl = document.getElementById('baseLvl');
  const charBaseLvl = Number($baseLvl.min);
  const $statCells = document.querySelectorAll('#baseStats tbody > tr > td'); // las celdas de la tabla de Stats
  const $growthCells = document.querySelectorAll('#baseGrowths tbody > tr > td:not(:last-child)'); // las celdas de la tabla de growths
  const baseStats = Array.from($statCells, cell => Number(cell.textContent)); // array con los stats base
  const baseGrowths = Array.from($growthCells, cell => Number(cell.textContent)); // array con los growths base
  let growthCounters = Array.from(baseGrowths); // array que sirve de sumador de los growths para calcular la subida de nivel
  let classGrowths = []; // array con los growths de la clase base
  let totalGrowths = []; // array con la suma de los growths base y de la clase base
  let lvlactual = Number($baseLvl.value);
  let baseClassBaseStats = []; // array con los base stats de la clase base

  (async function getBaseClassGrowths() { // Trae el JSON con las clases, encuentra la clase base del persoanje actual y guarda sus crecimientos
    const response = await fetch('/data/classes.json');
    const classes = await response.json();
    const baseClassData = classes.find(cls => cls.ID === baseClass);
    classGrowths = Object.values(baseClassData.Growths);
    classGrowths.forEach((growth, index) => {
      totalGrowths[index] = baseGrowths[index] + growth;
      if (charID === "Jean") { // La habilidad personal de Jean duplica los crecimientos de su clase
        totalGrowths[index] += growth;
      }
    });
    baseClassBaseStats = Object.values(baseClassData.BaseStats);
  })();

  document.getElementById('baseLvlDown').addEventListener("click", () => changeBaseLvl(-1)); // Disminuye en 1 el nivel base actual
  document.getElementById('baseLvlUp').addEventListener("click", () => changeBaseLvl(1)); // Aumenta en 1 el nivel base actual

  function changeBaseLvl(change) { // Refleja las subidas o bajadas de nivel en las tablas de estadisticas base y cehckbox asociados
    const value = Number($baseLvl.value);
    const minValue = Number($baseLvl.min);
    const maxValue = Number($baseLvl.max);
    const newValue = value + change;
    if (newValue >= minValue && newValue <= maxValue) {
      $baseLvl.value = newValue;
      changeBaseStats(change);
      if (newValue <= minValue + 1) {
        baseClassToggle(newValue);
      }
      enablePromotion();
    }
  }

  $baseClassToggle.addEventListener('change', () => baseClassToggle(Number($baseLvl.value))); // Accion a realizar cuando se clickea el checkbox de clase base

  function applyBaseClass() { // Actualiza los valores de crecimiento de la tabla base y pinta los que cambien
    if ($baseClassToggle.checked) {
      totalGrowths.forEach((growth, index) => {
        if (growth !== baseGrowths[index]) {
          $growthCells[index].textContent = growth;
          $growthCells[index].classList.add('text-green-400', 'font-semibold');
        }
      });
    } else {
      $growthCells.forEach((cell, index) => {
        cell.textContent = baseGrowths[index];
        cell.classList.remove('text-green-400', 'font-semibold');
      });
    }
  }

  function baseClassToggle(value) { // Valida si el checkbox de la clase se debe activar y bloquear, y cambia su estilo visual en funcion del estado
    if (value === charBaseLvl) {
      $baseClassToggle.disabled = false;
      applyBaseClass();
    } else if (value === charBaseLvl + 1) {
      $baseClassToggle.checked = true;
      $baseClassToggle.disabled = true;
      applyBaseClass();
    }
  }

  function changeBaseStats(change) { // Hace los calculos de los contadores y actualiza las celdas de la tabla de estadisticas base que se modifiquan
    for (let i = 0; i < growthCounters.length; i++) {
      if (change > 0) {
        growthCounters[i] += totalGrowths[i];
        if (growthCounters[i] >= 100) {
          while (growthCounters[i] >= 100) {
            growthCounters[i] -= 100;
            $statCells[i].textContent++;
            $statCells[i].classList.remove('text-red-400');
            $statCells[i].classList.add('text-green-400', 'font-semibold');
          }
        } else {
          $statCells[i].classList.remove('text-green-400', 'font-semibold');
        }
      } else {
        growthCounters[i] -= totalGrowths[i];
        if (growthCounters[i] < 0) {
          while (growthCounters[i] < 0) {
            growthCounters[i] = 100 + growthCounters[i];
            $statCells[i].textContent--;
            $statCells[i].classList.remove('text-green-400');
            $statCells[i].classList.add('text-red-400', 'font-semibold');
            if (Number($baseLvl.value) === charBaseLvl) {
              $statCells[i].classList.remove('text-red-400', 'font-semibold');
            }
          }
        } else {
          $statCells[i].classList.remove('text-red-400', 'font-semibold');
        }
      }
    }
  }

// Promote checkbox: intermediario entre la seccion de estadisitcas base y las avanzadas
  const $promote = document.getElementById('promote'); // Checkbox de promoción
  const $advClass = document.getElementById('advClass'); // Select de clases avanzadas (y basicas)
  enablePromotion(); // Llamada inicial para habilitar o deshabilitar el checkbox al cargar la página

  function enablePromotion() { // Función para habilitar o deshabilitar el checkbox de promoción y aplicar estilos
    if (Number($baseLvl.value) < 10) {
      $promote.checked = false;
      $promote.disabled = true;
    } else {
      $promote.disabled = false;
    }
  }

  $promote.addEventListener('change', function() { // Comportamiento al activar o desactivar el checkbox de promoción
    // Habilitar o deshabilitar los botones de cambio de nivel base
    enableBaseLvlButtons();
    if (this.checked) {
      // Habilitar el selector de clase
      $advClass.disabled = false; 
      // Trasladar los valores actuales de estadisticas y crecimientos base a las tablas avanzadas
      updateAdvGrowths();
    } else {
      // Dehabilitar y resetear el selector de clase avanzada
      $advClass.disabled = true; 
      $advClass.value = "";
      // Dehabilitar y resetear el checkbox de clase avanzada
      $advClassToggle.disabled = true; 
      $advClassToggle.checked = false;
      // Resetea el estilo de las celdas de las tablas de crecimientos avanzados
      applyAdvClass();
      // Setear las celdas de las tablas de estadísticas avanzadas con el string "-"
      const $advGrowthCells = document.querySelectorAll('#advGrowths tbody > tr > td');
      const $advStatsCells = document.querySelectorAll('#advStats tbody > tr > td');
      $advGrowthCells.forEach(cell => cell.textContent = '-');
      $advStatsCells.forEach(cell => cell.textContent = '-');
      // Setear el nivel avanzado en 1
    }
  });
  
  function enableBaseLvlButtons() { // Habilita o dehabilita los botones de nivel base segun el checkbox de promocion
    const $baseLvlDown = document.getElementById('baseLvlDown');
    const $baseLvlUp = document.getElementById('baseLvlUp');
    const disabled = $promote.checked;
    $baseLvlDown.disabled = disabled;
    $baseLvlUp.disabled = disabled;
  }

  const $advClassToggle = document.getElementById('applyAdvClass');
  
  $advClass.addEventListener("change", async function() {
    if(this.value !== "") {
      await getAdvClass(this.value);  // Hacer el fetch de la clase seleccionada y guardarla en una constante

    }
    $advClassToggle.disabled = (this.value === "");
    $advClassToggle.checked = (this.value !== "");
    applyAdvClass();
  });

  function updateAdvGrowths() {
    // Copiar los datos de la tabla baseGrowths a la tabla advGrowths
    const $advGrowthCells = document.querySelectorAll('#advGrowths tbody > tr > td:not(:last-child)');
    baseGrowths.forEach((baseCell, index) => {
      $advGrowthCells[index].textContent = String(baseCell);
    });

    // Copiar el contenido de la celda de baseStats a la correspondiente en advStats
    const $actualBaseStatsCells = document.querySelectorAll('#baseStats tbody > tr > td');
    const $advStatsCells = document.querySelectorAll('#advStats tbody > tr > td');
    $actualBaseStatsCells.forEach((cell, index) => {
      $advStatsCells[index].textContent = cell.textContent;
    });

    // Copia los contadores de crecimiento base al seleccionar la clase avanzada
    advGrowthCounters = Array.from(growthCounters); 
  }

  let advGrowthCounters = []; // array con los contadores de crecimiento al momento de seleccionar la clase avanzada
  let advClassGrowths = []; // array con los growths de la clase base
  let advTotalGrowths = []; // array con la suma de los growths base y de la clase avanzada
  let advClassBaseStats = []; // array con los base stats de la clase avanzada
  
  

  async function getAdvClass(advClass) {
    const response = await fetch('/data/classes.json');
    const classes = await response.json();
    advClassGrowths = Object.values(classes.find(cls => cls.ID === advClass).Growths);
    advClassGrowths.forEach((growth, index) => {
      advTotalGrowths[index] = baseGrowths[index] + growth;
      if(charID==="Jean") { // La habilidad personal de Jean duplica los crecimientos de su clase
        advTotalGrowths[index] += growth;
      }
    });
    advClassBaseStats = Object.values(classes.find(cls => cls.ID === advClass).BaseStats);
  }

  $advClassToggle.addEventListener('change', applyAdvClass);
  
  function applyAdvClass() { // Actualiza los valores de crecimiento de la tabla base y pinta los que cambien
    const $advGrowthCells = document.querySelectorAll('#advGrowths tbody > tr > td:not(:last-child)');
    const $advStatsCells = document.querySelectorAll('#advStats tbody > tr > td');
    if ($advClassToggle.checked) {
      advTotalGrowths.forEach((growth, index) => {
        if (growth !== baseGrowths[index]) {
          $advGrowthCells[index].textContent = growth;
          $advGrowthCells[index].classList.add('text-cyan-400', 'font-semibold');
        }
      });
      advClassBaseStats.forEach((stat, index) => {
        $advStatsCells[index].textContent = Number($advStatsCells[index].textContent) + (stat - baseClassBaseStats[index]);
        if (stat > baseClassBaseStats[index]) {
          $advStatsCells[index].classList.add('text-cyan-400', 'font-semibold');
        } 
        if (stat < baseClassBaseStats[index]) {
          $advStatsCells[index].classList.add('text-red-400', 'font-semibold');
        }
      });
    } else {
      $advGrowthCells.forEach((cell, index) => {
        cell.textContent = baseGrowths[index];
        cell.classList.remove('text-cyan-400', 'font-semibold');
      });
      $advStatsCells.forEach((cell, index) => {
        cell.textContent = $statCells[index].textContent;
        cell.classList.remove('text-cyan-400', 'text-red-400', 'font-semibold');
      });
    }
  }
</script>