---
import Layout from '../../layouts/Layout.astro'
import characters from '../../assets/data/characters.json'
import BentoItem from '../../components/BentoItem.astro'
import classes from '../../assets/data/classes.json'
import { Image } from 'astro:assets'

export async function getStaticPaths() {
  return characters.map((chars) => {
    return {
      params: { id: chars.ID },
    };
  });
}

const { id } = Astro.params
const char = characters.filter(char => char.ID === id)
const imagen = await Astro.glob('../../assets/images/characters/*.webp')
.then(imgs => imgs
  .map(img => img.default)
    .filter(item => item.src.includes(id))
);
---
<Layout 
    title={char[0].Name}
    description=`Character info: ${char[0].Name}`
>
  <section class="grid max-w-6xl gap-2 p-2 m-auto overflow-hidden auto-rows-min md:grid-cols-12"
  >
    <BentoItem title="Image" class="md:col-span-3 md:row-span-6">
      {
        imagen.map(img => (  
          <Image
            src={img}
            alt={char[0].Name}
            class="object-scale-down object-bottom w-auto m-auto rounded-lg sm:object-cover h-60 sm:h-full"
          />
        ))
      }
    </BentoItem>
    <BentoItem title="Bio" class="md:col-span-6 md:row-span-3">
      <h2 class="mb-2 text-2xl font-semibold">{char[0].Name}</h2>
      <p class="text-justify text-balance">Alear is the main protagonist in Fire Emblem Engage. As an Avatar, their gender, along with their name and birthday, is determined by the player.</p>
    </BentoItem>
    <BentoItem title="Recruitment" class="md:col-span-3 md:row-span-2">
      <p>{char[0].RecruitementChapter} ({char[0].RecruitementDescription})</p>
    </BentoItem>
    <BentoItem title="Base SP" class="md:col-span-2 md:row-span-1">
      <p>{char[0].BaseSP}</p>
    </BentoItem>
    <BentoItem title="Libre2" class="md:col-span-1 md:row-span-1">
      <p>Libre2</p>
    </BentoItem>
    <BentoItem title="Personal Skill" class="md:col-span-9 md:row-span-1">
      <img class="inline align-middle rounded-md size-6" src=`../src/assets/images/personal-skill/${char[0].PersonalSkill}.webp` alt={char[0].PersonalSkill}/>
      <p class="inline align-middle ms-1">{char[0].PersonalSkill}: {char[0].PersonalSkillDesc}</p>
    </BentoItem>
    <BentoItem title="Proficiencies"  class="md:col-span-4 md:row-span-2">
      <img class="inline align-middle rounded-md size-6" src={`../src/assets/images/proficiencies/${char[0].InnateProficiencies}.webp`} alt={char[0].InnateProficiencies}/>
      <p class="inline ms-1 font-semibold align-middle text-cyan-400">{char[0].InnateProficiencies} (Innate)</p>
      
      {(char[0].Proficiencies !== "-" && !Array.isArray(char[0].Proficiencies)) && (
        <>
          <img class="inline ml-2 align-middle rounded-md size-6" src={`../src/assets/images/proficiencies/${char[0].Proficiencies}.webp`} alt={char[0].Proficiencies}/>
          <p class="inline align-middle ms-1">{char[0].Proficiencies}</p>
        </>
      )}

      {(char[0].Proficiencies !== "-") && Array.isArray(char[0].Proficiencies) && char[0].Proficiencies.map((proficiency: string) => (
        <>
          <img class="inline ml-2 align-middle rounded-md size-6" src={`../src/assets/images/proficiencies/${proficiency}.webp`} alt={proficiency}/>
          <p class="inline align-middle ms-1">{proficiency}</p>
        </>
      ))}
    </BentoItem>
    <BentoItem title="Rank"           class="md:col-span-5 md:row-span-2">
      Stats Ranking
    </BentoItem>
    <BentoItem title="Level"          class="md:col-span-4 md:row-span-2">
      <div class="flex items-center mb-2">
        <p class="m-0 mr-4 min-w-max">Base: {char[0].BaseLevel}</p>
        <input id="baseLvl" onkeydown="return false" type="number" value=`${char[0].BaseLevel}` min=`${char[0].BaseLevel}` max="20" class="border text-gray-300 text-sm rounded-lg block w-14 p-1 text-center bg-gray-700 border-gray-600 "/>
      </div>
      <p>Base Internal: {char[0].BaseInternalLevel}</p>
      <!--
        slider de nivel base y un check button para indicar el momento de asencion
        cuando elige una clase avanzada en el dropdawn de clase, lo de arriba se deshabilita para no cambiarlo
        se habilita entonces un slider de nivel para la clase avanzada
        entonces en el calculo se toma la clase base y los crecimiento base, durante los niveles que se colocaron antes de marcar el check
        a eso se le suma el caluclo de los niveles del segundo slider, con los crecimientos de la clase avanzada

        El level up incial funciona asi: el personaje arranca en nivel 1 con los Growths base ya aplicados (lo del personaje, sin la clase), cuando sube a nivel 2 se ya aplican los Growths que incluyen a la clase base, y ahi los que llegan o pasan 100 suben un nivel, lo que sobra queda para el nivel siguiente

      -->
    </BentoItem>
    <BentoItem title="Class"          class="md:col-span-4 md:row-span-2">
      <div class="flex justify-between">
        <p>Base: {char[0].BaseClass}</p>
        <label for="applyClass" class="ms-2 inline-flex align-middle cursor-pointer">
          <input id="applyClass" name="applyClass" type="checkbox" class="sr-only peer">
          <div class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:bg-gray-100 after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600 ring-blue-500"></div>
          Apply
        </label>
      </div>
      <select id="selectClass" name="selectClass" class="p-2 rounded-lg min-w-min">
        {
          classes.map(item => (
            (item.ID === char[0].BaseClass)
            ?
            <option value={item.ID} selected>{item.ID}</option>
            :
            <option value={item.ID}>{item.ID}</option>
          ))
        }
      </select>
    </BentoItem>
    <BentoItem title="Emblem / Ring"  class="md:col-span-4 md:row-span-2">
      <p>Emblem or ring equiped and effect</p>
    </BentoItem>
    <BentoItem title="Stats"          class="md:col-span-6 md:row-span-2">
      <table id="Stats" class="w-full text-xs text-center text-gray-400 bg-gray-700 sm:text-sm">
        <thead>
          <tr>
            <th class="text-md" colspan="10">STATS</th>
          </tr>  
          <tr>
              <th>HP</th>
              <th>STR</th>
              <th>MAG</th>
              <th>DEX</th>
              <th>SPD</th>
              <th>DEF</th>
              <th>RES</th>
              <th>LCK</th>
              <th>BLD</th>
              <th>MOV</th>
            </tr>
        </thead>
        <tbody>
          <tr class="bg-gray-800">
            <td>{char[0].BaseHp}</td>
            <td>{char[0].BaseStr}</td>
            <td>{char[0].BaseMag}</td>
            <td>{char[0].BaseDex}</td>
            <td>{char[0].BaseSpd}</td>
            <td>{char[0].BaseDef}</td>
            <td>{char[0].BaseRes}</td>
            <td>{char[0].BaseLck}</td>
            <td>{char[0].BaseBld}</td>
            <td>{char[0].BaseMov}</td>
          </tr>
        </tbody>
      </table>
    </BentoItem>
    <BentoItem title="Growth Rates"   class="md:col-span-6 md:row-span-2">
      <table id="Growths" class="w-full text-xs text-center text-gray-400 bg-gray-700 sm:text-sm">
        <thead>
          <tr>
            <th class="text-md" colspan="10">GROWTH RATES</th>
          </tr>  
          <tr>
            <th>HP</th>
            <th>STR</th>
            <th>MAG</th>
            <th>DEX</th>
            <th>SPD</th>
            <th>DEF</th>
            <th>RES</th>
            <th>LCK</th>
            <th>BLD</th>
            <th>MOV</th>
          </tr>
        </thead>
        <tbody>
          <tr class="bg-gray-800">
            <td>{char[0].GrowthHp}</td>
            <td>{char[0].GrowthStr}</td>
            <td>{char[0].GrowthMag}</td>
            <td>{char[0].GrowthDex}</td>
            <td>{char[0].GrowthSpd}</td>
            <td>{char[0].GrowthDef}</td>
            <td>{char[0].GrowthRes}</td>
            <td>{char[0].GrowthLck}</td>
            <td>{char[0].GrowthBld}</td>
            <td>-</td>
          </tr>
        </tbody>
      </table>
    </BentoItem>
  </section>
</Layout>

<script is:inline define:vars={{ baseClass: char[0].BaseClass }}>
  let applyClassCheckbox = document.getElementById('applyClass'); // el checkbox
  const baseLvlInput = document.getElementById('baseLvl'); // el slider de nivel
  let lvlactual = baseLvlInput.valueAsNumber;
  let $statCells = document.querySelectorAll('#Stats tbody > tr > td'); // las celdas de la tabla de Stats
  const baseStats = Array.from($statCells, cell => parseInt(cell.textContent)); // array con los stats base
  const $growthCells = document.querySelectorAll('#Growths tbody > tr > td:not(:last-child)'); // las celdas de la tabla de growths
  const baseGrowths = Array.from($growthCells, cell => parseInt(cell.textContent)); // array con los growths base
  let growthCounters = Array.from(baseGrowths); // array que como sumador de los growths para calcular la subida de nivel
  let classGrowths = []; // array con los growths de la clase base
  let totalGrowths = []; // array con la suma de los growths base y de la clase base
  (async function getClassGrowths() {
    const response = await fetch('/data/classes.json');
    const classes = await response.json();
    classGrowths = Object.values(classes.find(cls => cls.ID === baseClass).Growths);
    classGrowths.forEach((growth, index) => {
      totalGrowths[index] = baseGrowths[index] + growth;
    });
  })();

  applyClassCheckbox.addEventListener('change', function() {
    if (baseLvlInput.valueAsNumber === 1) {
        applyBaseClass();
    }
});
  
  baseLvlInput.addEventListener('input', function() {
      // Obtener el nuevo valor de lvlactual
      //lvlactual = parseInt(this.value);
      
      // Si lvlactual es igual a 1, permitir al usuario activar o desactivar el checkbox
      if (baseLvlInput.valueAsNumber === 1) {
          applyClassCheckbox.disabled = false;
      } else {
          // De lo contrario, marcar y deshabilitar el checkbox
          applyClassCheckbox.checked = true;
          applyClassCheckbox.disabled = true;
          applyBaseClass();
      }
  });

  function applyBaseClass() {
    if (applyClassCheckbox.checked) {
      classGrowths.forEach((growth, index) => {
        if (growth !== 0) {
          $growthCells[index].textContent = baseGrowths[index] + growth;
          $growthCells[index].classList.add('text-green-400', 'font-semibold');
        }
      });
    } else {
      $growthCells.forEach((cell, index) => {
        cell.textContent = baseGrowths[index];
        cell.classList.remove('text-green-400', 'font-semibold');
      });
    }
  }


  baseLvlInput.addEventListener('input', function() {
    let newLevel = this.valueAsNumber;
    if(newLevel > lvlactual){
      lvlactual=newLevel
      for (let i = 0; i < growthCounters.length; i++) {
        growthCounters[i] += totalGrowths[i];
        if (growthCounters[i] >= 100) {
          growthCounters[i] -= 100;
          $statCells[i].textContent = parseInt($statCells[i].textContent) + 1;
          $statCells[i].classList.remove('text-red-400');
          $statCells[i].classList.add('text-green-400', 'font-semibold');
        }
        else {
          $statCells[i].classList.remove('text-green-400', 'font-semibold');
        }
      }
    } else{
      lvlactual=newLevel
      for (let i = 0; i < growthCounters.length; i++) {
        growthCounters[i] -= totalGrowths[i];
        if (growthCounters[i] < 0) {
          growthCounters[i] = 100 + growthCounters[i]
          $statCells[i].textContent = parseInt($statCells[i].textContent) - 1;
          $statCells[i].classList.remove('text-green-400');
          $statCells[i].classList.add('text-red-400', 'font-semibold');
          if(lvlactual===1){
            $statCells[i].classList.remove('text-red-400', 'font-semibold');
          }
        }
        else {
          $statCells[i].classList.remove('text-red-400', 'font-semibold');
        }
      }
      
    }
  });
</script>

<style>

  input[type="checkbox"][disabled] {
    filter: invert(100%) hue-rotate(18deg) brightness(5);
  }
</style>