---
import Layout from '../../layouts/Layout.astro'
import characters from '../../assets/data/characters.json'
import BentoItem from '../../components/BentoItem.astro'
import classes from '../../assets/data/classes.json'
import { Image } from 'astro:assets'

export async function getStaticPaths() {
  return characters.map((chars) => {
    return {
      params: { id: chars.ID },
    };
  });
}

const { id } = Astro.params
const char = characters.filter(char => char.ID === id)
const imagen = await Astro.glob('../../assets/images/characters/*.webp')
.then(imgs => imgs
  .map(img => img.default)
    .filter(item => item.src.includes(id))
);
---
<Layout 
    title={char[0].Name}
    description=`Character info: ${char[0].Name}`
>
  <section class="grid max-w-6xl gap-2 p-2 m-auto overflow-hidden auto-rows-min md:grid-cols-12"
  >
    <BentoItem title="Image" class="md:col-span-3 md:row-span-6">
      {
        imagen.map(img => (  
          <Image
            src={img}
            alt={char[0].Name}
            class="object-scale-down object-bottom w-auto m-auto rounded-lg sm:object-cover h-60 sm:h-full"
          />
        ))
      }
    </BentoItem>
    <BentoItem title="Bio" class="md:col-span-6 md:row-span-3">
      <h2 class="mb-2 text-2xl font-semibold">{char[0].Name}</h2>
      <p class="text-justify text-balance">Alear is the main protagonist in Fire Emblem Engage. As an Avatar, their gender, along with their name and birthday, is determined by the player.</p>
    </BentoItem>
    <BentoItem title="Recruitment" class="md:col-span-3 md:row-span-2">
      <p>{char[0].RecruitementChapter} ({char[0].RecruitementDescription})</p>
    </BentoItem>
    <BentoItem title="Base SP" class="md:col-span-2 md:row-span-1">
      <p>{char[0].BaseSP}</p>
    </BentoItem>
    <BentoItem title="Libre2" class="md:col-span-1 md:row-span-1">
      <p>Libre2</p>
    </BentoItem>
    <BentoItem title="Personal Skill" class="md:col-span-9 md:row-span-1">
      <img class="inline align-middle size-6" src=`/images/personal-skill/${char[0].PersonalSkill}.webp` alt={char[0].PersonalSkill}/>
      <p class="inline align-middle ms-1">{char[0].PersonalSkill}: {char[0].PersonalSkillDesc}</p>
    </BentoItem>
    <BentoItem title="Proficiencies"  class="md:col-span-4 md:row-span-2">
      <img class="inline align-middle rounded-md size-6" src={`/images/proficiencies/${char[0].InnateProficiencies}.webp`} alt={char[0].InnateProficiencies}/>
      <p class="inline font-semibold align-middle ms-1 text-cyan-400">{char[0].InnateProficiencies} (Innate)</p>
      
      {(char[0].Proficiencies !== "-" && !Array.isArray(char[0].Proficiencies)) && (
        <>
          <img class="inline ml-2 align-middle rounded-md size-6" src={`/images/proficiencies/${char[0].Proficiencies}.webp`} alt={char[0].Proficiencies}/>
          <p class="inline align-middle ms-1">{char[0].Proficiencies}</p>
        </>
      )}

      {(char[0].Proficiencies !== "-") && Array.isArray(char[0].Proficiencies) && char[0].Proficiencies.map((proficiency: string) => (
        <>
          <img class="inline ml-2 align-middle rounded-md size-6" src={`/images/proficiencies/${proficiency}.webp`} alt={proficiency}/>
          <p class="inline align-middle ms-1">{proficiency}</p>
        </>
      ))}
    </BentoItem>
    <BentoItem title="Rank"           class="md:col-span-5 md:row-span-2">
      <p>Stats Ranking</p>
    </BentoItem>
    <BentoItem title="Level"          class="md:col-span-4 md:row-span-2">
      <div class="flex items-center mb-2">
        <p class="m-0 mr-4 min-w-max">Base: {char[0].BaseLevel}</p>
        <div class="flex">
          <button id="baseLvlDown" class="w-8 p-1 font-extrabold text-center text-gray-300 bg-gray-700 border border-gray-600 rounded-s-lg">-</button>
          <input type="text" readonly id="baseLvl" value=`${char[0].BaseLevel}` min=`${char[0].BaseLevel}` max="20" class="w-12 p-1 text-sm text-center text-gray-300 bg-gray-700 border border-gray-600">
          <button id="baseLvlUp" class="w-8 p-1 font-extrabold text-center text-gray-300 bg-gray-700 border border-gray-600 rounded-e-lg">+</button>
        </div>
        <label for="promote" class="inline-flex align-middle cursor-pointer ms-2">
          <input id="promote" type="checkbox" class="sr-only peer"/>
          <div id="promoteToggle" class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:bg-gray-100 after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"></div>
          Promote
        </label>
      </div>
      <p>Base Internal: {char[0].BaseInternalLevel}</p>
      
      
      <!--
        slider de nivel base y un check button para indicar el momento de asencion
        cuando elige una clase avanzada en el dropdawn de clase, lo de arriba se deshabilita para no cambiarlo
        se habilita entonces un slider de nivel para la clase avanzada
        entonces en el calculo se toma la clase base y los crecimiento base, durante los niveles que se colocaron antes de marcar el check
        a eso se le suma el caluclo de los niveles del segundo slider, con los crecimientos de la clase avanzada
      -->
    </BentoItem>
    <BentoItem title="Class"          class="md:col-span-4 md:row-span-2">
      <div class="flex justify-between">
        <p>Base: {char[0].BaseClass}</p>
        <label for="applyBaseClass" class="inline-flex align-middle cursor-pointer ms-2">
          <input id="applyBaseClass" type="checkbox" class="sr-only peer"/>
          <div id="baseClassToggle" class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:bg-gray-100 after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"></div>
          Apply
        </label>
      </div>
      <select id="selectClass" name="selectClass" class="p-2 rounded-lg min-w-min">
        {
          classes.map(item => (
            (item.ID === char[0].BaseClass)
            ?
            <option value={item.ID} selected>{item.ID}</option>
            :
            <option value={item.ID}>{item.ID}</option>
          ))
        }
      </select>
    </BentoItem>
    <BentoItem title="Emblem / Ring"  class="md:col-span-4 md:row-span-2">
      <p>Emblem or ring equiped and effect</p>
    </BentoItem>
    <BentoItem title="Stats"          class="md:col-span-6 md:row-span-2">
      <table id="Stats" class="w-full text-xs text-center text-gray-400 bg-gray-700 sm:text-sm">
        <thead>
          <tr>
            <th class="text-md" colspan="10">STATS</th>
          </tr>  
          <tr>
              <th>HP</th>
              <th>STR</th>
              <th>MAG</th>
              <th>DEX</th>
              <th>SPD</th>
              <th>DEF</th>
              <th>RES</th>
              <th>LCK</th>
              <th>BLD</th>
              <th>MOV</th>
            </tr>
        </thead>
        <tbody>
          <tr class="bg-gray-800">
            <td>{char[0].BaseHp}</td>
            <td>{char[0].BaseStr}</td>
            <td>{char[0].BaseMag}</td>
            <td>{char[0].BaseDex}</td>
            <td>{char[0].BaseSpd}</td>
            <td>{char[0].BaseDef}</td>
            <td>{char[0].BaseRes}</td>
            <td>{char[0].BaseLck}</td>
            <td>{char[0].BaseBld}</td>
            <td>{char[0].BaseMov}</td>
          </tr>
        </tbody>
      </table>
    </BentoItem>
    <BentoItem title="Growth Rates"   class="md:col-span-6 md:row-span-2">
      <table id="Growths" class="w-full text-xs text-center text-gray-400 bg-gray-700 sm:text-sm">
        <thead>
          <tr>
            <th class="text-md" colspan="10">GROWTH RATES</th>
          </tr>  
          <tr>
            <th>HP</th>
            <th>STR</th>
            <th>MAG</th>
            <th>DEX</th>
            <th>SPD</th>
            <th>DEF</th>
            <th>RES</th>
            <th>LCK</th>
            <th>BLD</th>
            <th>MOV</th>
          </tr>
        </thead>
        <tbody>
          <tr class="bg-gray-800">
            <td>{char[0].GrowthHp}</td>
            <td>{char[0].GrowthStr}</td>
            <td>{char[0].GrowthMag}</td>
            <td>{char[0].GrowthDex}</td>
            <td>{char[0].GrowthSpd}</td>
            <td>{char[0].GrowthDef}</td>
            <td>{char[0].GrowthRes}</td>
            <td>{char[0].GrowthLck}</td>
            <td>{char[0].GrowthBld}</td>
            <td>-</td>
          </tr>
        </tbody>
      </table>
    </BentoItem>
  </section>
</Layout>

<script type="module" define:vars={{ baseClass: char[0].BaseClass, baseLevel: char[0].BaseLevel }}>
  const $applyBaseClass = document.getElementById('applyBaseClass'); // el checkbox
  const $baseLvl = document.getElementById('baseLvl'); // el slider de nivel
  const $statCells = document.querySelectorAll('#Stats tbody > tr > td'); // las celdas de la tabla de Stats
  const $growthCells = document.querySelectorAll('#Growths tbody > tr > td:not(:last-child)'); // las celdas de la tabla de growths
  const baseStats = Array.from($statCells, cell => Number(cell.textContent)); // array con los stats base
  const baseGrowths = Array.from($growthCells, cell => Number(cell.textContent)); // array con los growths base
  let growthCounters = Array.from(baseGrowths); // array que sirve de sumador de los growths para calcular la subida de nivel
  let classGrowths = []; // array con los growths de la clase base
  let totalGrowths = []; // array con la suma de los growths base y de la clase base
  let lvlactual = Number($baseLvl.value);

  (async function getBaseClassGrowths() {
    const response = await fetch('/data/classes.json');
    const classes = await response.json();
    classGrowths = Object.values(classes.find(cls => cls.ID === baseClass).Growths);
    classGrowths.forEach((growth, index) => {
      totalGrowths[index] = baseGrowths[index] + growth;
    });
  })();

  $applyBaseClass.addEventListener('change', function() {
    if (Number($baseLvl.value) === baseLevel) {
      applyBaseClass();
    }
  });

  document.getElementById('baseLvlDown').addEventListener("click", function() {
    changeBaseLvl(-1);
  });

  document.getElementById('baseLvlUp').addEventListener("click", function() {
    changeBaseLvl(1);
  });
 
  // Aplica colores a las celdas de Growths que se modifiquen por la clase base
  function applyBaseClass() {
    if ($applyBaseClass.checked) {
      classGrowths.forEach((growth, index) => {
        if (growth !== 0) {
          $growthCells[index].textContent = baseGrowths[index] + growth;
          $growthCells[index].classList.add('text-green-400', 'font-semibold');
        }
      });
    } else {
      $growthCells.forEach((cell, index) => {
        cell.textContent = baseGrowths[index];
        cell.classList.remove('text-green-400', 'font-semibold');
      });
    }
  }

  function baseClassToggle() {
    const baseClassToggle = document.getElementById('baseClassToggle');
    if ($applyBaseClass.disabled) {
      baseClassToggle.classList.remove('peer-checked:bg-red-600', 'after:bg-gray-100');
      baseClassToggle.classList.add('peer-checked:bg-red-800', 'after:bg-gray-400');
    } else {
      baseClassToggle.classList.remove('peer-checked:bg-red-800', 'after:bg-gray-400');
      baseClassToggle.classList.add('peer-checked:bg-red-600', 'after:bg-gray-100');
    }
  }

  function changeBaseLvl(change) {
    const value = Number($baseLvl.value);
    const minValue = Number($baseLvl.min);
    const maxValue = Number($baseLvl.max);
    const newValue = value + change;
    if (newValue >= minValue && newValue <= maxValue) {
      $baseLvl.value = newValue;
      changeBaseStats();
      changeBaseClassCheckbox();
      checkBaseLevel();
    }
  }

  function changeBaseClassCheckbox() {
    if (Number($baseLvl.value) === baseLevel) {
      $applyBaseClass.disabled = false;
    } else {
      $applyBaseClass.checked = true;
      $applyBaseClass.disabled = true;
      applyBaseClass();
    }
    baseClassToggle();
  }
  
  // Se encarga de hacer el calculo de las estadisticas base a medida que se sube o baja de nivel, ademas agrega clases a las celdas que cambian para reflejar los cambios
  function changeBaseStats() {
    let newLevel = Number($baseLvl.value);
    if(newLevel > lvlactual){
      lvlactual=newLevel
      for (let i = 0; i < growthCounters.length; i++) {
        growthCounters[i] += totalGrowths[i];
        if (growthCounters[i] >= 100) {
          while (growthCounters[i] >= 100){
            growthCounters[i] -= 100;
            $statCells[i].textContent = parseInt($statCells[i].textContent) + 1;
            if (!$statCells[i].classList.contains('text-green-400') || !$statCells[i].classList.contains('font-semibold') || !$statCells[i].classList.contains('text-red-400')) {
              $statCells[i].classList.remove('text-red-400');
              $statCells[i].classList.add('text-green-400', 'font-semibold');
            }
          }
        }
        else {
          $statCells[i].classList.remove('text-green-400', 'font-semibold');
        }
      }
    } else{
      lvlactual=newLevel
      for (let i = 0; i < growthCounters.length; i++) {
        growthCounters[i] -= totalGrowths[i];
        if (growthCounters[i] < 0) {
          while(growthCounters[i] < 0){
            growthCounters[i] = 100 + growthCounters[i]
            $statCells[i].textContent = parseInt($statCells[i].textContent) - 1;
            if (!$statCells[i].classList.contains('text-green-400') || !$statCells[i].classList.contains('font-semibold') || !$statCells[i].classList.contains('text-red-400')) {
              $statCells[i].classList.remove('text-green-400');
              $statCells[i].classList.add('text-red-400', 'font-semibold');
            }
            if(lvlactual===baseLevel){
              $statCells[i].classList.remove('text-red-400', 'font-semibold');
            }
          }
        }
        else {
          $statCells[i].classList.remove('text-red-400', 'font-semibold');
        }
      }
    }
  }

  // Se ejecuta al cargar la pagina para definir si el checkbox empieza Disabled o no
  checkBaseLevel();
  function checkBaseLevel() {
    const promoteCheckbox = document.getElementById('promote');
    if (lvlactual < 10) {
        promoteCheckbox.disabled = true;
    } else {
        promoteCheckbox.disabled = false;
    }
  }

  

</script>