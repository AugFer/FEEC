---
import { Image } from 'astro:assets';
import Layout from '@/layouts/Layout.astro';
import BentoItem from '@/components/BentoItem.astro';
import BentoTable from '@/components/BentoTable.astro';
import characters from '@/assets/data/characters.json';
import classes from '@/assets/data/classes.json';

export async function getStaticPaths() {
  return characters.map((chars) => {
    return {
      params: { id: chars.ID },
    };
  });
}

const { id } = Astro.params
const char = characters.filter(char => char.ID === id)
const imagen = await Astro.glob('@/assets/images/characters/*.webp')
.then(imgs => imgs
  .map(img => img.default)
    .filter(item => item.src.includes(id))
);

const charClass = Object.values(classes).find(cls => cls.ID === char[0].BaseClass);
---
<Layout 
    title={char[0].Name}
    description=`Character info: ${char[0].Name}`
>
  <section class="grid max-w-6xl gap-2 px-4 m-auto overflow-hidden auto-rows-min md:grid-cols-12"
  id="charInfo"
  data-charID={char[0].ID}
  data-baseClass={char[0].BaseClass}
  >
    <BentoItem title="Image"          class="justify-self-center w-fit md:col-span-3 md:row-span-4">
      {
        imagen.map(img => (  
          <Image
            src={img}
            alt={char[0].Name}
            class="object-scale-down object-bottom w-auto m-auto rounded-lg sm:object-cover h-60 sm:h-full"
          />
        ))
      }
    </BentoItem>
    <BentoItem title="Bio"            class="md:col-span-5 md:row-span-1">
      <h2 class="mb-2 text-2xl font-semibold leading-7">{char[0].Name}</h2>
      <p class="text-sm font-light text-pretty">{char[0].Bio}</p>
    </BentoItem>
    <BentoItem title="Recruitment"    class="md:col-span-4 md:row-span-1">
      <p class="inline font-medium">{char[0].Recruitment .Chapter}: </p>
      <p class="inline text-sm font-light">{char[0].Recruitment.Description}</p>
    </BentoItem>
    <BentoItem title="Personal Skill" class="md:col-span-9 md:row-span-1">
      <div class="flex">
        <img class="size-6" src=`/images/personal-skill/${char[0].PersonalSkill.Name}.webp` alt={char[0].PersonalSkill.Name} title={char[0].PersonalSkill.Name}/>
        <div class="ml-2">
          <p class="inline font-medium">{char[0].PersonalSkill.Name}: </p>
          <p class="inline text-sm font-light">{char[0].PersonalSkill.Description}</p>
        </div>
      </div>
    </BentoItem>
    <BentoItem title="Proficiencies"  class="md:col-span-4 md:row-span-1">
      <div class="flex">
        <div class="flex mr-3">
          <img class="inline mr-2 rounded-md size-6" src={`/images/proficiencies/${char[0].Proficiencies.Innate[0]}.webp`} alt={char[0].Proficiencies.Innate[0]} title={char[0].Proficiencies.Innate[0]}/>
          <p class="inline font-medium text-cyan-400">{char[0].Proficiencies.Innate[0]} (Innate)</p>
        </div>
        {
          char[0].Proficiencies.Regular.length > 0 && (
          char[0].Proficiencies.Regular.map((proficiency) => (
            <div class="flex mr-3">
              <img class="inline mr-2 rounded-md size-6" src={`/images/proficiencies/${proficiency}.webp`} alt={proficiency} title={proficiency}/>
              <p class="inline">{proficiency}</p>
            </div>
          )))
        }
      </div>
    </BentoItem>
    <BentoItem title="Base SP"        class="md:col-span-2 md:row-span-1">
      <p class="text-sm font-light">{char[0].InitialSP}</p>
    </BentoItem>
    <BentoItem title="Libre 1"        class="md:col-span-3 md:row-span-1">
      <p>Libre 1</p>
    </BentoItem>
    <BentoItem title="Libre 2"        class="md:col-span-9 md:row-span-1">
      <p>Libre 2</p>
    </BentoItem>
    <BentoItem title="Initial Class"  class="md:col-span-7 md:row-span-1">
      <div class="flex gap-3">
        <p>{char[0].BaseClass} <span class="text-sm font-thin">({charClass!.Type})</span></p>
        <label for="applyBaseClass" class="inline-flex text-sm font-thin cursor-pointer">
          <input id="applyBaseClass" type="checkbox" class="sr-only peer"/>
          <div id="baseClassToggle" class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:rounded-full after:h-5 after:w-5 after:transition-all after:bg-gray-100 peer-checked:bg-gradient-to-r peer-checked:from-lime-400 peer-checked:to-green-500 peer-disabled:peer-checked:bg-gradient-to-r peer-disabled:peer-checked:from-lime-600 peer-disabled:peer-checked:to-green-600 peer-disabled:after:bg-gray-400"></div>
          Apply
        </label>
      </div>
      { (charClass!.Type === 'Advanced' || charClass!.Type === 'Special') ?
      <div class="flex mt-2">
        <img class="size-6" src={`/images/adv-skills/${charClass!.Skill.Name}.webp`} alt="Skill icon" title={charClass!.Skill.Name}/>
        <div class="ms-2">
          <p class="inline font-medium">{charClass!.Skill.Name}: </p>
          <p class="inline text-sm font-light">{charClass!.Skill.Description}</p>
        </div>
      </div>
      : null 
      }
    </BentoItem>
    <BentoItem title="Weapons"        class="md:col-span-3 md:row-span-1">
      <div class="flex">
      {
        charClass!.Proficiencies.Weapon.map((proficiency, index) => (
          <div class="flex mr-3">
            <img class="inline mr-2 rounded-md size-6" src={`/images/proficiencies/${proficiency}.webp`} alt={proficiency} title={proficiency}/>
            <p class="inline mr-1">{charClass!.Proficiencies.RegularRank[index]}</p>
            { (charClass!.Proficiencies.RegularRank[index] !== charClass!.Proficiencies.InnateRank[index]) ?
            <p class="inline font-medium text-cyan-400">({charClass!.Proficiencies.InnateRank[index]})</p>
            : null
            }
          </div>
        ))
      }
      </div>
    </BentoItem>
    <BentoItem title="Base Level"     class="md:col-span-2 md:row-span-1">
      <div class="flex">
        <button id="baseLvlDown"    class="w-8 p-1 font-extrabold text-center bg-gray-700 border border-gray-600 rounded-s-lg">-</button>
        <input type="text" readonly id="baseLvl" value=`${char[0].InitialLevel}` min=`${char[0].InitialLevel}` 
        max={(char[0].BaseClass === 'Thief' || char[0].BaseClass === 'Dancer') ? "40" : "20"} 
        class="w-12 p-1 text-sm text-center bg-gray-700 border border-gray-600"
        />
        <button id="baseLvlUp" class="w-8 p-1 font-extrabold text-center bg-gray-700 border border-gray-600 rounded-e-lg">+</button>
      </div>
    </BentoItem>
    <BentoTable
      tableType="Base"
      id="baseGrowths"
      title="GROWTH RATES"
      character={char[0]}
    />
    <BentoTable
      tableType="Base"
      id="baseStats"
      title="STATS"
      character={char[0]}
    />
    <BentoItem title="Promotion"      class="md:col-span-2 md:row-span-1">
      <label for="promote" class="inline-flex items-center text-sm font-thin cursor-pointer">
        <input id="promote" type="checkbox" class="sr-only peer"/>
        <div id="promoteToggle" class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:rounded-full after:h-5 after:w-5 after:transition-all after:bg-gray-100 peer-checked:bg-gradient-to-r peer-checked:from-purple-400 peer-checked:to-indigo-500"></div>
        Promote
      </label>
    </BentoItem>
    <BentoItem title="Advanced Class" class="md:col-span-8 md:row-span-1">
      <div class="flex-col sm:flex">
        <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
          <select id="advClass" disabled name="advClass" class="p-2 text-sm rounded-lg min-w-min sm:text-base">
            <option value="" selected>- Select -</option>
            {classes.map(item => {
              const isCharBaseClass = char[0].BaseClass === item.ID;
              const meetsExclusiveCharCondition = item.ExclusiveChar === "" || item.ExclusiveChar === char[0].Name;
              const meetsReqBaseClassCondition = item.ReqBaseClassId === "" || item.ReqBaseClassId.includes(char[0].BaseClass);
              if (isCharBaseClass || (meetsExclusiveCharCondition && meetsReqBaseClassCondition)) {
                return (
                  <option
                    value={item.ID}
                    id={isCharBaseClass ? "isCharBaseClass" : null}
                  >
                    {item.ID} | {item.Type}
                  </option>
                );
              }
              return null;
            })}
          </select>
          <label for="applyAdvClass" class="inline-flex items-center text-sm font-thin cursor-pointer">
            <input id="applyAdvClass" type="checkbox" disabled class="sr-only peer"/>
            <div id="advClassToggle" class="me-2 relative w-11 h-6 rounded-full bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:absolute after:top-[2px] after:start-[2px] after:rounded-full after:h-5 after:w-5 after:transition-all after:bg-gray-100 peer-checked:bg-gradient-to-r peer-checked:from-cyan-300 peer-checked:to-blue-500 peer-disabled:peer-checked:bg-gradient-to-r peer-disabled:peer-checked:from-cyan-600 peer-disabled:peer-checked:to-blue-600 peer-disabled:after:bg-gray-400"></div>
            Apply
          </label>
        </div>
        <div id="advSkillInfo" class="hidden mt-3">
          <img class="align-middle size-6" src="" alt="Skill icon" title=""/>
          <div class="ms-2">
            <p class="inline font-semibold"></p>
            <p class="inline text-sm font-light"></p>
          </div>
        </div>
      </div>
      
    </BentoItem>
    <BentoItem title="Advanced Level" class="md:col-span-2 md:row-span-1">
      <div class="flex">
        <button id="advLvlDown" disabled class="w-8 p-1 font-extrabold text-center bg-gray-700 border border-gray-600 rounded-s-lg">-</button>
        <input type="text" readonly id="advLvl" value="1" min="1" max="20" class="w-12 p-1 text-sm text-center bg-gray-700 border border-gray-600">
        <button id="advLvlUp" disabled class="w-8 p-1 font-extrabold text-center bg-gray-700 border border-gray-600 rounded-e-lg">+</button>
      </div>
    </BentoItem>
    <BentoTable
      tableType="Advanced"
      id="advGrowths"
      title="GROWTH RATES"
    />
    <BentoTable
      tableType="Advanced"
      id="advStats"
      title="STATS"
    />
  </section>
</Layout>

<script>
  interface Clase {
    ID: string
    Name: string
    Type: string
    ReqBaseClassId: string
    ExclusiveChar: string
    UnitType: string
    UnitWeaknesses: string
    Skill: {
      Name: string
      Description: string
    }
    Proficiencies: {
      Weapon: Array<string>
      RegularRank: Array<string>
      InnateRank: Array<string>
    }
    BaseStats: {
      Hp: number
      Str: number
      Mag: number
      Dex: number
      Spd: number
      Def: number
      Res: number
      Lck: number
      Bld: number
      Mov: number
    }
    GrowthRates: {
      Hp: number
      Str: number
      Mag: number
      Dex: number
      Spd: number
      Def: number
      Res: number
      Lck: number
      Bld: number
    }
    MaxStats: {
      Hp: number
      Str: number
      Mag: number
      Dex: number
      Spd: number
      Def: number
      Res: number
      Lck: number
      Bld: number
    };
  }

  let charInfo = document.getElementById('charInfo');
  let charID = charInfo!.getAttribute('data-charID');
  let baseClass = charInfo!.getAttribute('data-baseClass');
  let classes: Clase[];

  const $baseClassToggle = document.getElementById('applyBaseClass') as HTMLInputElement;
  const $baseLvl = document.getElementById('baseLvl') as HTMLInputElement;
  const charBaseLvl = Number($baseLvl.min);
  const $baseStatsCells = document.querySelectorAll('#baseStats tbody > tr > td') as NodeListOf<HTMLTableCellElement>;
  const $baseGrowthsCells = document.querySelectorAll('#baseGrowths tbody > tr > td:not(:last-child)') as NodeListOf<HTMLTableCellElement>;
  const baseStats = Array.from($baseStatsCells, cell => Number(cell.textContent));
  const baseGrowths = Array.from($baseGrowthsCells, cell => Number(cell.textContent));
  const $baseLvlDown = document.getElementById('baseLvlDown') as HTMLButtonElement;
  const $baseLvlUp = document.getElementById('baseLvlUp') as HTMLButtonElement;
  let growthCounters = Array.from(baseGrowths);
  let classGrowths : number[] = [];
  let totalGrowths : number[] = [];
  let baseClassBaseStats : number[] = [];

  const $promote = document.getElementById('promote') as HTMLInputElement;
  const $isCharBaseClass = document.getElementById('isCharBaseClass') as HTMLOptionElement;
  const $advClass = document.getElementById('advClass') as HTMLSelectElement;
  const $advClassToggle = document.getElementById('applyAdvClass') as HTMLInputElement;
  const $advLvl = document.getElementById('advLvl') as HTMLInputElement;
  const $advStatsCells = document.querySelectorAll('#advStats tbody > tr > td') as NodeListOf<HTMLTableCellElement>;
  const $advGrowthsCells = document.querySelectorAll('#advGrowths tbody > tr > td:not(:last-child)') as NodeListOf<HTMLTableCellElement>;
  const $advLvlDown = document.getElementById('advLvlDown') as HTMLButtonElement;
  const $advLvlUp = document.getElementById('advLvlUp') as HTMLButtonElement;
  let advGrowthCounters : number[] = [];
  let advClassGrowths : number[] = [];
  let advTotalGrowths : number[] = [];
  let advClassBaseStats : number[] = [];
  let advClassApplyStyleChanges: number[] = [];
  
  (async function getBaseClass() {
    const response = await fetch('/data/classes.json');
    classes = await response.json();
    const baseClassData = classes.find((cls: Clase) => cls.ID === baseClass);
    classGrowths = Object.values(baseClassData!.GrowthRates);
    classGrowths.forEach((growth, index) => {
      totalGrowths[index] = baseGrowths[index] + growth;
      if (charID === "Jean") {
        totalGrowths[index] += growth;
      }
    });
    baseClassBaseStats = Object.values(baseClassData!.BaseStats);
  })();

  enablePromotion();

  $baseLvlDown.addEventListener("click", () => changeBaseLvl(-1));

  $baseLvlUp.addEventListener("click", () => changeBaseLvl(1));

  $baseClassToggle.addEventListener('change', () => baseClassToggle(Number($baseLvl.value)));

  function changeBaseLvl(change: number) {
    const value = Number($baseLvl.value);
    const minValue = Number($baseLvl.min);
    const maxValue = Number($baseLvl.max);
    const newValue = value + change;
    if (newValue >= minValue && newValue <= maxValue) {
      $baseLvl.value = String(newValue);
      changeBaseStats(change);
      if (newValue <= minValue + 1) {
        baseClassToggle(newValue);
      }
      enablePromotion();
    }
  }

  function applyBaseClass() {
    if ($baseClassToggle.checked) {
      totalGrowths.forEach((growth, index) => {
        if (growth !== baseGrowths[index]) {
          $baseGrowthsCells[index].textContent = String(growth);
          $baseGrowthsCells[index].classList.add('text-green-400', 'font-semibold');
        }
      });
    } else {
      $baseGrowthsCells.forEach((cell, index) => {
        cell.textContent = String(baseGrowths[index]);
        cell.classList.remove('text-green-400', 'font-semibold');
      });
    }
  }

  function baseClassToggle(value: number) {
    if (value === charBaseLvl) {
      $baseClassToggle.disabled = false;
      applyBaseClass();
    } else if (value === charBaseLvl + 1) {
      $baseClassToggle.checked = true;
      $baseClassToggle.disabled = true;
      applyBaseClass();
    }
  }

  function changeBaseStats(change: number) {
    for (let i = 0; i < growthCounters.length; i++) {
      if (change > 0) {
        growthCounters[i] += totalGrowths[i];
        if (growthCounters[i] >= 100) {
          while (growthCounters[i] >= 100) {
            growthCounters[i] -= 100;
            $baseStatsCells[i].textContent = String(Number($baseStatsCells[i].textContent) + 1);
            $baseStatsCells[i].classList.remove('text-red-400');
            $baseStatsCells[i].classList.add('text-green-400', 'font-semibold');
          }
        } else {
          $baseStatsCells[i].classList.remove('text-green-400', 'font-semibold');
        }
      } else {
        growthCounters[i] -= totalGrowths[i];
        if (growthCounters[i] < 0) {
          while (growthCounters[i] < 0) {
            growthCounters[i] = 100 + growthCounters[i];
            $baseStatsCells[i].textContent = String(Number($baseStatsCells[i].textContent) - 1);
            $baseStatsCells[i].classList.remove('text-green-400');
            $baseStatsCells[i].classList.add('text-red-400', 'font-semibold');
            if (Number($baseLvl.value) === charBaseLvl) {
              $baseStatsCells[i].classList.remove('text-red-400', 'font-semibold');
            }
          }
        } else {
          $baseStatsCells[i].classList.remove('text-red-400', 'font-semibold');
        }
      }
    }
  }

  function enablePromotion() {
    if (Number($baseLvl.value) < 10) {
      $promote.checked = false;
      $promote.disabled = true;
    } else {
      $promote.disabled = false;
    }
  }

  $promote.addEventListener('change', function() {
    const isChecked = this.checked;
    $baseLvlDown.disabled = isChecked;
    $baseLvlUp.disabled = isChecked;
    if (isChecked) {
      $advClass.disabled = false;
      $isCharBaseClass.disabled = Number($baseLvl.value) !== Number($baseLvl.max);
    } else {
      $advClass.disabled = true; 
      $advClass.value = "";
      $advClassToggle.disabled = true; 
      $advClassToggle.checked = false;
      resetAdvTables();
      $advLvlDown.disabled = true;
      $advLvlUp.disabled = true;
      $advLvl.value = String(1);
    }
  });
  
  $advClass.addEventListener("change", function() {
    const value = this.value;
    if(value === "") {
      resetAdvTables();
      updateAdvSkill("", "");
    }
    else {
      getAdvClass(value);
      setAdvValues();
      if (value === "Thief" || value === "Dancer") {
        $advLvl.max = "40";
      } else {
          $advLvl.max = "20";
      }
    }
    $advClassToggle.disabled = value === "";
    $advClassToggle.checked = false;
    $advLvlDown.disabled = true;
    $advLvlUp.disabled = true;
    $advLvl.value = String(1);
  });

  function updateAdvSkill(skill: string, description: string) {
    const $advSkillInfo = document.getElementById('advSkillInfo') as HTMLDivElement;
    const isVisible = !!skill;

    if (skill) {
      const img = $advSkillInfo.querySelector('img');
      img!.src = `/images/adv-skills/${skill}.webp`;
      img!.title = skill;
      const p = $advSkillInfo.querySelectorAll('p');
      p[0].textContent = `${skill}: `;
      p[1].textContent = description;
    }

    $advSkillInfo.classList.toggle('hidden', !isVisible);
    $advSkillInfo.classList.toggle('flex', isVisible);  
  }

  $advClassToggle.addEventListener('change', function() {
    const value = !this.checked;
    applyAdvClass();
    $advLvlDown.disabled = value;
    $advLvlUp.disabled = value;
  });

  $advLvlDown.addEventListener("click", () => changeAdvLvl(-1));

  $advLvlUp.addEventListener("click", () => changeAdvLvl(1));

  function resetAdvTables(){
    $advGrowthsCells.forEach((cell) => {
      cell.textContent = '-';
      cell.classList.remove('text-cyan-400', 'font-semibold');
    });
    $advStatsCells.forEach((cell) => {
      cell.textContent = '-';
      cell.classList.remove('text-cyan-400', 'text-red-400', 'text-green-400', 'font-semibold');
    });
  }

  function setAdvValues() {
    baseGrowths.forEach((baseCell, index) => {
      $advGrowthsCells[index].textContent = String(baseCell);
      $advGrowthsCells[index].classList.remove('text-cyan-400', 'font-semibold');
    });
    const $actualBaseStatsCells = document.querySelectorAll('#baseStats tbody > tr > td');
    $actualBaseStatsCells.forEach((cell, index) => {
      $advStatsCells[index].textContent = cell.textContent;
      $advStatsCells[index].classList.remove('text-cyan-400', 'text-red-400', 'text-green-400', 'font-semibold');
    });
    advGrowthCounters = Array.from(growthCounters); 
  }

  function getAdvClass(advClass: string) {
    const advClassData = classes.find((cls: Clase) => cls.ID === advClass);
    advClassGrowths = Object.values(advClassData!.GrowthRates);
    advClassGrowths.forEach((growth, index) => {
      advTotalGrowths[index] = baseGrowths[index] + growth;
      if(charID === "Jean") {
        advTotalGrowths[index] += growth;
      }
    });
    advClassBaseStats = Object.values(advClassData!.BaseStats);
    updateAdvSkill(advClassData!.Skill.Name, advClassData!.Skill.Description);
  }

  function applyAdvClass() {
    if ($advClassToggle.checked) {
      advTotalGrowths.forEach((growth, index) => {
        if (growth !== baseGrowths[index]) {
          $advGrowthsCells[index].textContent = String(growth);
          $advGrowthsCells[index].classList.add('text-cyan-400', 'font-semibold');
        }
      });
      advClassBaseStats.forEach((stat, index) => {
        $advStatsCells[index].textContent = String(Number($advStatsCells[index].textContent) + (stat - baseClassBaseStats[index]));
        if (stat > baseClassBaseStats[index]) {
          $advStatsCells[index].classList.add('text-cyan-400', 'font-semibold');
          advClassApplyStyleChanges[index] = 1;
        } else {
          if (stat < baseClassBaseStats[index]) {
            $advStatsCells[index].classList.add('text-red-400', 'font-semibold');
            advClassApplyStyleChanges[index] = -1;
          } else {
            advClassApplyStyleChanges[index] = 0;
          }
        }
      });
    } else {
      $advGrowthsCells.forEach((cell, index) => {
        cell.textContent = String(baseGrowths[index]);
        cell.classList.remove('text-cyan-400', 'font-semibold');
      });
      advClassBaseStats.forEach((stat, index) => {
        $advStatsCells[index].textContent = String(Number($advStatsCells[index].textContent) - (stat - baseClassBaseStats[index]));
        $advStatsCells[index].classList.remove('text-cyan-400', 'text-red-400', 'text-green-400', 'font-semibold');
      });
    }
  }
  
  function changeAdvLvl(change: number) {
    const value = Number($advLvl.value);
    const minValue = Number($advLvl.min);
    const maxValue = Number($advLvl.max);
    const newValue = value + change;

    if (newValue >= minValue && newValue <= maxValue) {
      if (value === minValue && newValue === minValue + 1) {
          $advStatsCells[$advStatsCells.length - 1].classList.remove('text-cyan-400', 'text-red-400', 'font-semibold');
      }
      advClassToggle(newValue);
      $advLvl.value = String(newValue);
      changeAdvStats(change);
    }
  }

  function advClassToggle(newValue: number) {
    if (newValue === 1) {
      $advClassToggle.disabled = false;
    } else if (newValue === 2) {
      $advClassToggle.disabled = true;
    }
  }

  function changeAdvStats(change: number) {
    for (let i = 0; i < advGrowthCounters.length; i++) {
      if (change > 0) {
        advGrowthCounters[i] += advTotalGrowths[i];
        if (advGrowthCounters[i] >= 100) {
          while (advGrowthCounters[i] >= 100) {
            advGrowthCounters[i] -= 100;
            $advStatsCells[i].textContent = String(Number($advStatsCells[i].textContent) + 1);
            $advStatsCells[i].classList.remove('text-red-400', 'text-cyan-400');
            $advStatsCells[i].classList.add('text-green-400', 'font-semibold');
          }
        } else {
          $advStatsCells[i].classList.remove('text-red-400', 'text-green-400', 'font-semibold', 'text-cyan-400');
        }
      } else {
        advGrowthCounters[i] -= advTotalGrowths[i];
        if (advGrowthCounters[i] < 0) {
          while (advGrowthCounters[i] < 0) {
            advGrowthCounters[i] = 100 + advGrowthCounters[i];
            $advStatsCells[i].textContent = String(Number($advStatsCells[i].textContent) - 1);
            $advStatsCells[i].classList.remove('text-green-400', 'text-cyan-400');
            $advStatsCells[i].classList.add('text-red-400', 'font-semibold');
            if (Number($advLvl.value) === 1) {
              applyAdvClassStyleChanges();
            }
          }
        } else {
          $advStatsCells[i].classList.remove('text-red-400', 'font-semibold', 'text-cyan-400');
          if (Number($advLvl.value) === 1) {
            applyAdvClassStyleChanges();
            }
        }
      }
    }
  }

  function applyAdvClassStyleChanges() {
    for (let i = 0; i < $advStatsCells.length; i++) {
      if (advClassApplyStyleChanges[i] > 0) {
        $advStatsCells[i].classList.add('text-cyan-400', 'font-semibold');
        $advStatsCells[i].classList.remove('text-red-400');
      } else if (advClassApplyStyleChanges[i] < 0) {
        $advStatsCells[i].classList.remove('text-cyan-400');
        $advStatsCells[i].classList.add('text-red-400', 'font-semibold');
      }
      else{
        $advStatsCells[i].classList.remove('text-red-400', 'text-cyan-400', 'font-semibold');
      }
    }
  }
</script>